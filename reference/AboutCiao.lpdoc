
The Ciao system is a full programming environment for developing
programs in the Prolog language and in several other languages which
are extensions and modifications of Prolog and (Constraint) Logic
Programming in several interesting and useful directions.
@comment{The Ciao system is a full programming environment for
developing programs in the Prolog language (including standard
@bf{ISO-Prolog}) as well as in several other languages which are
extensions and modifications of Prolog in several interesting and
useful directions. Ciao is both a next generation logic programming
environment and a multiparadigm @em{general purpose} programming
system.  @comment{since it also allows programming in the functional-,
constraint-, imperative programming styles} These @comment{styles and
many other} extensions are supported via libraries, thanks to its
novel modular design. As a result, Ciao allows working with @em{fully
declarative subsets} of Prolog and also to @em{extend} these subsets
(or ISO-Prolog) both syntactically and semantically. Most importantly,
these restrictions and extensions can be activated separately on each
program module so that several extensions can coexist in the same
application for different modules.}  The programming environment
offers a number of tools such as the Ciao standalone compiler
(@tt{ciaoc}), a traditional-style top-level interactive shell
(@tt{ciaosh} or @tt{ciao}), an interpreter of scripts written in Ciao
(@tt{ciao-shell}), a Ciao (and Prolog) @tt{emacs} mode (which greatly
helps the task of developing programs with support for editing,
debugging, version/change tracking, etc.), numerous libraries, a
powerful program preprocessor (@tt{ciaopp}
@cite{effofai-toplas,prog-glob-an,ciaopp-iclp99-tut,ciaopp-manual,ciaopp-sas03-journal-scp},
which supports
static debugging and optimization from program analysis via source to
source program transformation), and an automatic documentation
generator (@tt{lpdoc}) @cite{lpdoc-reference,lpdoc-cl2000}.  A number
of execution visualization tools
@cite{visandor-iclp93,apt-disciplbook,vifid-trifid-disciplbook} are
also available.

This manual documents the first four of the tools mentioned above [see
@ref{PART I - The program development environment}], and the Ciao 
language and libraries. The @tt{ciaopp} and @tt{lpdoc} tools are
documented in separate manuals.

The Ciao language [see @ref{PART II - The Ciao basic language}] has
been designed from the ground up to be small, but to also allow
extensions and restrictions in a modular way. This allows modular
program development with clear program semantics, as well as automatic
program manipulation and optimization. Ciao includes a robust module
system @cite{ciao-modules-cl2000}, module-based automatic incremental
compilation @cite{ciaoc-ws}, and modular global program analysis,
debugging and optimization @cite{ciao-modules-analspec-ws}, based on a
rich assertion language [see @ref{PART III - Assertions and their use}]
for declaring (optional) program properties (including types, modes,
determinacy, etc.), which can be checked either statically or
dynamically.  The program analysis, static debugging and optimization
tasks related to these assertions are performed by the @apl{ciaopp}
preprocessor, as mentioned above. These assertions (together with
special comment-style declarations) are also the ones used by the
@apl{lpdoc} autodocumenter to generate documentation for programs (the
comment-style declarations are documented in the @tt{lpdoc} manual).

Moreover, the modular design allows powerful extensions such as
constraint logic programming, multi-paradigm features (higher-order,
functional notation, etc.), alternative search and evaluation
strategies, concurrency (threads), distributed and parallel execution,
foreign language interfaces, restrictions such as working with pure
horn clauses [see @ref{PART IV - Language extensions}], as well as
supporting standard ISO-Prolog [see @ref{PART V - Compatibility}].

Ciao includes a collection of standard and additional libraries and
utilities see [see @ref{PART VI - Data structures and algorithms},
@ref{PART VII - Standard libraries}, and @ref{PART VIII - Additional
libraries}]. Apart from these, many other tools and libraries, such as
@concept{language bindings}) to several languages and systems are
distributed as separate @concept{bundle}s.

@comment{Other interfaces (like @concept{Java interface},
@concept{SQL-like database interface}, @concept{Tcl/tk interface},
etc.) are distributed separately.}

