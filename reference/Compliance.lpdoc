
One of the innovative features of Ciao is that it has been designed to
subsume transparently @index{ISO-Prolog} (International Standard ISO/IEC 13211-1,
PROLOG: Part 1--General Core @cite{iso-prolog}), while at the same
time extending it in many important ways. The intention is to ensure
that all ISO-compliant Prolog programs run correctly under Ciao. At
the same time, the Ciao module system (see @ref{PART II - The Ciao
basic language} and @cite{ciao-modules-cl2000} for a discussion of the
motivations behind the design) allows selectively avoiding the loading
of most ISO-builtins (and changing some other ISO characteristics)
when not needed, so that it is possible to work with purer subsets of
Prolog and also to build small executables.  Also, this module system
makes it possible to develop extensions using these purer subsets (or
even the full ISO-standard) as a starting point. Using these features,
the Ciao distribution includes libraries which significantly extend
the language both syntactically and semantically.

In order to aid programmers who wish to write standard-compliant
programs, library predicates that correspond to those in the
ISO-Prolog standard are marked specially in the manuals, and
differences between the Ciao and the prescribed ISO-Prolog behaviours,
if any, are commented appropriately. There is also functionality (see
@ref{ISO-Prolog package}) which makes the standard ISO-Prolog
predicates available by default in the modules that use traditional
module declarations or that load this package explicitly. Thus,
ISO-compliance is active transparently for ported programs.

The intention of the Ciao developers is to maintain and continuously
improve the compliance of Ciao with the published parts of the ISO
standard, with other reasonable extensions of the standard that may be
published in the future, and with those features that the Prolog
developer community agrees widely on.  At the same time, since one of
the design objectives of Ciao is to address some shortcomings of
previous implementations of Prolog and logic programming in general,
we also encourage and work towards making some of the better ideas
present in the system reach the standards and also be adopted by other
systems.

